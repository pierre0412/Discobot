import asyncio
import signal
import sys

# Import Discord bot functions
from discobot import start_bot, stop_bot, sync_commands

# Import MQTT client
from mqtt import mqtt_client, publish_message, dico_valeurs

# Flag to track if a shutdown is in progress
shutdown_in_progress = False

async def shutdown(signal_received=None):
    """Handle a graceful shutdown of all services"""
    global shutdown_in_progress
    
    if shutdown_in_progress:
        return
    
    shutdown_in_progress = True
    
    if signal_received:
        print(f"\nüõë Signal {signal_received} re√ßu, arr√™t en cours...")
    else:
        print("\nüõë Arr√™t demand√©, fermeture des services...")
    
    # Stop MQTT client
    try:
        mqtt_client.loop_stop()
        mqtt_client.disconnect()
        print("‚úì Client MQTT d√©connect√©")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'arr√™t du client MQTT: {e}")
    
    # Stop Discord bot
    try:
        await stop_bot()
    except Exception as e:
        print(f"‚ùå Erreur lors de l'arr√™t du bot Discord: {e}")
    
    print("‚úì Arr√™t complet termin√©")

async def main():
    """Main function to run the bot and MQTT client"""
    try:
        # MQTT client is already initialized and connected in mqtt.py
        print("‚úì Client MQTT initialis√©")
        
        # Start the Discord bot
        print("ü§ñ D√©marrage du bot Discord...")
        await start_bot()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Interruption clavier d√©tect√©e")
    except Exception as e:
        print(f"‚ùå Erreur dans la fonction principale: {e}")
    finally:
        await shutdown()

if __name__ == "__main__":
    # Set up signal handlers for graceful shutdown
    for sig in (signal.SIGINT, signal.SIGTERM):
        signal.signal(sig, lambda s, f: asyncio.create_task(shutdown(s)))
    
    # Print startup banner
    print("=" * 50)
    print("ü§ñ D√âMARRAGE DU BOT DISCORD + MQTT")
    print("=" * 50)
    print("‚Ä¢ Utilisez les commandes Discord pour contr√¥ler les lumi√®res")
    print("‚Ä¢ Utilisez /temp pour consulter les temp√©ratures")
    print("‚Ä¢ Utilisez /mqtt_status pour v√©rifier l'√©tat de la connexion MQTT")
    print("‚Ä¢ Utilisez Ctrl+C pour arr√™ter le bot")
    print("=" * 50)
    
    # Run the main function
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Interruption clavier d√©tect√©e lors du d√©marrage")
    except Exception as e:
        print(f"‚ùå Erreur critique: {e}")
        sys.exit(1)