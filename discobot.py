import os
import json
import discord
from dotenv import load_dotenv
from discord.ext import commands

from mqtt import dico_valeurs

load_dotenv(dotenv_path="config")

intents = discord.Intents.default()
intents.members = True
intents.message_content = True
intents.guilds = True
intents.guild_messages = True

bot = commands.Bot(command_prefix='!', intents=intents)
tree = bot.tree

@bot.event
async def on_ready():
    print(f'‚úì Bot Discord connect√© en tant que {bot.user}')
    print(f'‚úì Bot pr√©sent sur {len(bot.guilds)} serveur(s)')

    for guild in bot.guilds:
        print(f"  - {guild.name} (ID: {guild.id})")

    try:
        # Synchroniser les commandes slash
        synced = await bot.tree.sync()
        print(f"‚úì {len(synced)} commandes slash synchronis√©es globalement")

        # Afficher les commandes synchronis√©es
        for cmd in synced:
            print(f"  - /{cmd.name}: {cmd.description}")

    except Exception as e:
        print(f"‚ùå Erreur lors de la synchronisation des commandes: {e}")


# Event pour d√©tecter les interactions
@bot.event
async def on_interaction(interaction):
    print(f"üîî Interaction re√ßue: {interaction.type} de {interaction.user}")
    if interaction.type == discord.InteractionType.application_command:
        print(f"  - Commande: /{interaction.data.get('name', 'inconnue')}")


@bot.tree.command(name='ping', description="Commande de ping et latence")
async def ping(interaction: discord.Interaction):
    """Commande de test classique"""
    latency = round(bot.latency * 1000)
    await interaction.response.send_message(f'üèì Pong! Latence: {latency}ms')
    print(f"‚úì Commande ping ex√©cut√©e par {interaction.user}")


@bot.tree.command(name="test_classique", description="Commande de test classique")
async def test_classique(interaction: discord.Interaction):
    await interaction.response.send_message("‚úÖ Bot fonctionnel avec commandes classiques!")
    print(f"‚úì Commande test_classique ex√©cut√©e par {interaction.user}")


@bot.tree.command(name="test", description="Commande de test")
async def test(interaction: discord.Interaction):
    await interaction.response.send_message("‚úÖ Le bot fonctionne correctement !")
    print(f"‚úì Commande /test ex√©cut√©e par {interaction.user}")


@bot.tree.command(name="bonjour", description="Dis bonjour !")
async def bonjour(interaction: discord.Interaction):
    await interaction.response.send_message("Bonjour ! üëã")
    print(f"‚úì Commande /bonjour ex√©cut√©e par {interaction.user}")


@bot.tree.command(name="info", description="Informations sur le bot")
async def info(interaction: discord.Interaction):
    embed = discord.Embed(title="ü§ñ Informations Bot", description="Bot Discord + MQTT", color=0x00ff00)
    print(f"‚úì Commande /info ex√©cut√©e par {interaction.user}")
    # Adapter selon le contexte (DM ou serveur)
    if interaction.guild:
        embed.add_field(name="Serveur actuel", value=interaction.guild.name, inline=True)
        embed.add_field(name="Serveurs total", value=len(bot.guilds), inline=True)
    else:
        embed.add_field(name="Message priv√©", value="‚úÖ", inline=True)
        embed.add_field(name="Serveurs total", value=len(bot.guilds), inline=True)

    embed.add_field(name="Latence", value=f"{round(bot.latency * 1000)}ms", inline=True)
    embed.add_field(name="Capteurs MQTT", value=len(dico_valeurs), inline=True)

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="temp", description="Affiche les temp√©ratures")
async def temp(interaction: discord.Interaction, piece: str = None):
    """Affiche les temp√©ratures des capteurs MQTT"""
    print(f"‚úì Commande /temp ex√©cut√©e par {interaction.user} (pi√®ce: {piece})")

    if piece:
        # Temp√©rature d'une pi√®ce sp√©cifique
        key = f"{piece.lower()}_t"
        temp = dico_valeurs.get(key)
        if temp:
            await interaction.response.send_message(f"üå°Ô∏è Temp√©rature {piece}: {temp}¬∞C")
        else:
            pieces_disponibles = [k.replace("_t", "") for k in dico_valeurs.keys()]
            message = f"‚ùå Pi√®ce '{piece}' non trouv√©e.\nPi√®ces disponibles: {', '.join(pieces_disponibles)}"
            await interaction.response.send_message(message)
    else:
        # Toutes les temp√©ratures
        if dico_valeurs:
            message = "üå°Ô∏è **Temp√©ratures actuelles:**\n"
            for capteur, temp in dico_valeurs.items():
                piece_name = capteur.replace("_t", "")
                message += f"‚Ä¢ {piece_name.capitalize()}: {temp}¬∞C\n"
            await interaction.response.send_message(message)
        else:
            await interaction.response.send_message("‚ùå Aucune donn√©e de temp√©rature disponible")

@bot.tree.command(name="mqtt_status", description="Statut de la connexion MQTT")
async def mqtt_status(interaction: discord.Interaction):
    """Affiche le statut de la connexion MQTT"""
    print(f"‚úì Commande /mqtt_status ex√©cut√©e par {interaction.user}")
    try:
        from mqtt import mqtt_client
        status = "‚úÖ Connect√©" if mqtt_client.is_connected() else "‚ùå D√©connect√©"
        nb_capteurs = len(dico_valeurs)
        message = f"**Statut MQTT:** {status}\n**Capteurs actifs:** {nb_capteurs}"

        if dico_valeurs:
            message += "\n\n**Derni√®res valeurs:**\n"
            for capteur, temp in list(dico_valeurs.items())[:5]:  # Limite √† 5 pour √©viter les messages trop longs
                piece_name = capteur.replace("_t", "")
                message += f"‚Ä¢ {piece_name}: {temp}¬∞C\n"

        await interaction.response.send_message(message)
    except Exception as e:
        print(f"‚ùå Erreur dans mqtt_status: {e}")
        await interaction.response.send_message("‚ùå Erreur lors de la v√©rification du statut MQTT")

@bot.tree.command(name="light", description="Contr√¥le des lumi√®res")
async def light(interaction: discord.Interaction, piece: str, etat: str):
    """Contr√¥le des lumi√®res via MQTT

    Parameters
    ----------
    piece : str
        La pi√®ce o√π se trouve la lumi√®re (salon, cuisine, chambre, etc.)
    etat : str
        L'√©tat souhait√© (on, off)
    """
    print(f"‚úì Commande /light ex√©cut√©e par {interaction.user} (pi√®ce: {piece}, √©tat: {etat})")

    # V√©rifier les param√®tres
    if etat.lower() not in ["on", "off"]:
        await interaction.response.send_message("‚ùå √âtat invalide. Utilisez 'on' ou 'off'.", ephemeral=True)
        return

    # Normaliser les noms de pi√®ces
    piece_norm = piece.lower().strip()

    # D√©finir le topic MQTT en fonction de la pi√®ce
    topic_map = {
        "salon": "zigbee2mqtt/lumieres_salon/set",
    }

    # V√©rifier si la pi√®ce est valide
    if piece_norm not in topic_map:
        pieces_dispo = ", ".join(topic_map.keys())
        await interaction.response.send_message(f"‚ùå Pi√®ce '{piece}' non reconnue.\nPi√®ces disponibles: {pieces_dispo}",
            ephemeral=True)
        return

    # Obtenir le topic MQTT
    topic = topic_map[piece_norm]

    try:
        # Importer la fonction de publication MQTT
        from mqtt import publish_message

        # Publier le message MQTT
        payload = json.dumps({"state": etat.lower()})
        publish_message(topic, payload)

        # R√©pondre √† l'utilisateur
        emoji = "üí°" if etat.lower() == "on" else "üåë"
        await interaction.response.send_message(
            f"{emoji} Lumi√®re {piece}: **{etat.upper()}**"
        )
    except Exception as e:
        print(f"‚ùå Erreur dans light: {e}")
        await interaction.response.send_message(
            "‚ùå Erreur lors de l'envoi de la commande MQTT",
            ephemeral=True
        )


async def send_simple_message(message):
    channel = bot.get_channel(941854371023577108)
    await channel.send(message)
    print(f"üìß Message envoy√©: {message}")

# Gestion des erreurs
@bot.tree.error
async def on_app_command_error(interaction: discord.Interaction, error: discord.app_commands.AppCommandError):
    print(f"‚ùå Erreur commande /{interaction.command}: {error}")
    try:
        if not interaction.response.is_done():
            await interaction.response.send_message("‚ùå Une erreur s'est produite.", ephemeral=True)
        else:
            await interaction.followup.send("‚ùå Une erreur s'est produite.", ephemeral=True)
    except Exception as e:
        print(f"‚ùå Impossible d'envoyer le message d'erreur: {e}")

# Event pour d√©bogage
@bot.event
async def on_message(message):
    # Ignorer ses propres messages
    if message.author == bot.user:
        return

    # Log des messages re√ßus
    if message.content.startswith('!'):
        print(f"üì® Message re√ßu de {message.author}: {message.content}")

    # Traiter les commandes
    await bot.process_commands(message)

# Fonctions pour le contr√¥le depuis main.py
async def start_bot():
    """D√©marre le bot Discord"""
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise ValueError("BOT_TOKEN non trouv√© dans la configuration")

    print(f"üîë Tentative de connexion avec le token...")
    await bot.start(token)

async def stop_bot():
    """Arr√™te le bot Discord"""
    if not bot.is_closed():
        await bot.close()
        print("‚úì Bot Discord ferm√©")

# Fonction pour synchroniser manuellement les commandes (si n√©cessaire)
async def sync_commands():
    """Synchronise les commandes slash manuellement"""
    try:
        synced = await bot.tree.sync()
        print(f"‚úì {len(synced)} commandes synchronis√©es manuellement")
        return synced
    except Exception as e:
        print(f"‚ùå Erreur synchronisation manuelle: {e}")
        return []